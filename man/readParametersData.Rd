% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/readParameters.R
\name{readParametersData}
\alias{readParametersData}
\title{Reads the parameters to be tuned by \pkg{irace} from a r data structure. This function is no user friendly
because constructing the input data is error-prone and the function does not contain any input validation.
Designed as a low lever interface for wrapper functions in other libraries. We recommend you use the much
nicer readParameter function or whatever user friendly interface in other languages such as iracepy.}
\usage{
readParametersData(names, types, switches, domain, conditions)
}
\arguments{
\item{names}{Vector that contains the names of the parameters.}

\item{types}{Vector that contains the type of each parameter 'i', 'c', 'r', 'o'.
Numerical parameters can be sampled in a log-scale with 'i,log' and 'r,log'
(no spaces).}

\item{switches}{that contains the switches to be used for the
parameters on the command line.}

\item{domain}{List of vectors, where each vector may contain two
values (minimum, maximum) for real and integer parameters, or
possibly more for categorical parameters

@param conditions List of R logical expressions, with variables
corresponding to parameter names.}
}
\value{
A list containing the definitions of the parameters read. The list is
structured as follows:
\describe{
\item{\code{names}}{Vector that contains the names of the parameters.}
\item{\code{types}}{Vector that contains the type of each parameter 'i', 'c', 'r', 'o'.
Numerical parameters can be sampled in a log-scale with 'i,log' and 'r,log'
(no spaces).}
\item{\code{switches}}{Vector that contains the switches to be used for the
parameters on the command line.}
\item{\code{domain}}{List of vectors, where each vector may contain two
values (minimum, maximum) for real and integer parameters, or
possibly more for categorical parameters.}
\item{\code{conditions}}{List of R logical expressions, with variables
corresponding to parameter names.}
\item{\code{isFixed}}{Logical vector that specifies which parameter is fixed
and, thus, it does not need to be tuned.}
\item{\code{nbParameters}}{An integer, the total number of parameters.}
\item{\code{nbFixed}}{An integer, the number of parameters with a fixed value.}
\item{\code{nbVariable}}{Number of variable (to be tuned) parameters.}
\item{\code{depends}}{List of character vectors, each vector specifies
which parameters depend on this one.}
\item{\code{isDependent}}{Logical vector that specifies which parameter has
a dependent domain.}
}
}
\description{
Reads the parameters to be tuned by \pkg{irace} from a r data structure. This function is no user friendly
because constructing the input data is error-prone and the function does not contain any input validation.
Designed as a low lever interface for wrapper functions in other libraries. We recommend you use the much
nicer readParameter function or whatever user friendly interface in other languages such as iracepy.
}
\details{
This function is designed to used as an API for binding with other languages
such as python with iracepy. As such, there is no input validation
(validations should be by the packages using it, such as iracepy). Invalid
input such as different lengths for the vectors and list will result in undefined behavior.

A fixed parameter is a parameter that should not be sampled but
instead should be always set to the only value of its domain.  In this
function we set isFixed to TRUE only if the parameter is a categorical
and has only one possible value.  If it is an integer and the minimum
and maximum are equal, or it is a real and the minimum and maximum
values satisfy \code{round(minimum, digits) == round(maximum, digits)},
then the parameter description is rejected as invalid to identify
potential user errors.
}
\examples{
parameters.table <- '
# name       switch           type  values               [conditions (using R syntax)]
algorithm    "--"             c     (as,mmas,eas,ras,acs)
localsearch  "--localsearch " c     (0, 1, 2, 3)
alpha        "--alpha "       r     (0.00, 5.00)
beta         "--beta "        r     (0.00, 10.00)
rho          "--rho  "        r     (0.01, 1.00)
ants         "--ants "        i,log (5, 100)
q0           "--q0 "          r     (0.0, 1.0)           | algorithm == "acs"
rasrank      "--rasranks "    i     (1, "min(ants, 10)") | algorithm == "ras"
elitistants  "--elitistants " i     (1, ants)            | algorithm == "eas"
nnls         "--nnls "        i     (5, 50)              | localsearch \%in\% c(1,2,3)
dlb          "--dlb "         c     (0, 1)               | localsearch \%in\% c(1,2,3)
'

d = list()
names <- c(
    'algorithm',
    'localsearch',
    'alpha',
    'beta',
    'rho',
    'ants',
    'q0',
    'rasrank',
    'elitistants',
    'nnls',
    'dlb'
)

switches <- c(
    '--',
    '--localsearch ',
    '--alpha ',
    '--beta ',
    '--rho  ',
    '--ants ',
    '--q0 ',
    '--rasranks ',
    '--elitistants ',
    '--nnls ',
    '--dlb '
)

types <- c(
    'c',
    'c',
    'r',
    'r',
    'r',
    'i,log',
    'r',
    'i',
    'i',
    'i',
    'c'
)

domain <- list(
    c('as', 'mmas', 'eas', 'ras', 'acs'),
    c('0', '1', '2', '3'),
    c(0.0, 5.0),
    c(0.0, 10.0),
    c(0.01, 1.0),
    c(5, 100),
    c(0.0, 1.0),
    expression(1, min(ants, 10)),
    expression(1, ants),
    c(5, 50),
    c('0', '1')
)


conditions <- list(
    TRUE,
    TRUE,
    TRUE,
    TRUE,
    TRUE,
    TRUE,
    expression(algorithm == 'acs'),
    expression(algorithm == 'ras'),
    expression(algorithm == 'eas'),
    expression(localsearch \%in\% c(1, 2, 3)),
    expression(localsearch \%in\% c(1, 2, 3))
)


t <- readParameters(text = parameters.table, digits = 5)

u <- readParametersData(names = names, switches = switches, types = types, domain = domain, conditions = conditions)

identical(t, u)
# The two methods of reading parameters give identical results


}
\author{
Deyao Chen
}
