======================================================================
irace: An implementation in R of Iterated Race.

Manuel López-Ibáñez      
Jérémie Dubois-Lacoste   

Contact email: irace@iridia.ulb.ac.be
======================================================================

-------------
Usage
-------------

* Create a directory for storing the configuration of the tuning, for
  example "/path/to/tuning/".

* Copy the files in the templates/ directory to your
  "/path/to/tuning/" directory.  For each template hook (*.tmpl) in
  your "/path/to/tuning/" directory, remove the '.tmpl' suffix, and
  modify them following the instructions in each file. In particular,
  tune-main.tmpl should be adjusted depending on your usage (local,
  cluster, etc).  The hooks should be executable. In tune-conf.tmpl,
  uncomment and assign only the parameters for which you need a value
  different than the default one. See the examples in examples/.

* Put the instances in "/path/to/tuning/Instances/". In addition, you
  can create a file that specifies which instances from that directory
  should be run and which instance-specific parameters to use. See
  tune-conf.tmpl and instances-list.tmpl for examples.

* Assuming that irace is installed in /path/to/installdir/, calling
  the command /path/to/installdir/irace from your tuning directory
  performs one run of Iterated Race. See the output of "irace
  --help" for additional configuration parameters. Command-line
  parameters override the configuration specified in the tune-conf
  file. The command irace will not attempt to create the execution
  directory (execDir), so it must exist before calling irace.

* For executing several repetitions of Iterated F-race in parallel,
  call the program parallel-irace.sh from your tuning directory with
  the number of repetitions. The execution directory of each run of
  irace will be set to "/path/to/tuning/TUNE-dd", where dd is a
  number padded with zeroes. Be careful, parallel-irace.sh will
  create these directories from scratch, deleting them first if they
  already exist. Check the help of parallel-irace.sh by running it
  without parameters.

* There are three ways to execute calls to hookRun in parallel:
  
  1) --parallel N : will use the multicore package to launch locally up to
  N calls of hookRun in parallel.

  2) --mpi 1 --parallel N : will use the Rmpi package to launch N slaves
  + 1 master, in order to execute N calls of hookRun in parallel. The
  user is responsible to set up MPI correctly. For an example of
  using MPI mode in an SGE cluster, see examples/mpi/.

  3) --sge-cluster 1 : will launch as many calls of hookRun as possible
  and use 'qstat' to wait for cluster jobs. The user *must* call qsub
  from hookRun with the appropriate configuration for their cluster,
  otherwise hookRun will not submit jobs to the cluster. In this mode,
  irace must run in the submission node, and hence, qsub should not
  be used to invoke irace (either directly or throught tune-main).
  See the examples in examples/cluster-mode/.

If you find that you need to modify anything else, something is not
clear or if you have problems, please contact irace@iridia.ulb.ac.be

-------------
Requisites
-------------

 * R (http://www.r-project.org/).
   Versions that work: 2.10
   Versions that do not work: 2.4 and earlier.

 * The wrappers irace and parallel-irace require GNU Bash.

 * Cluster-mode (--sge-cluster 1) requires Grid Engine commands qsub and
   qstat. The comand qsub should return a message that contains the
   string: "Your job JOBID". The command "qstat -j JOBID" returns
   nonzero if JOBID has finished, otherwise it should return zero.

